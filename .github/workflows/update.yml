name: Update CSV files hourly

on:
  schedule:
    - cron: "0 * * * *"   # каждый час (UTC)
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    env:
      USE_SSH: ${{ secrets.USE_SSH }}   # 'true' или 'false'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install psycopg2-binary pandas
          fi

      # --- SSH-туннель (если USE_SSH == 'true') ---
      - name: Start SSH tunnel (if USE_SSH == true)
        if: ${{ env.USE_SSH == 'true' }}
        env:
          SSH_KEY:  ${{ secrets.SSH1_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH1_HOST }}
          SSH_PORT: ${{ secrets.SSH1_PORT }}
          SSH_USER: ${{ secrets.SSH1_USER }}
          DB1_HOST: ${{ secrets.DB1_HOST }}
          DB1_PORT: ${{ secrets.DB1_PORT }}
          DB2_HOST: ${{ secrets.DB2_HOST }}
          DB2_PORT: ${{ secrets.DB2_PORT }}
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p "${SSH_PORT}" "${SSH_HOST}" >> ~/.ssh/known_hosts 2>/dev/null || true

          echo "→ Forward 6543 -> ${DB1_HOST}:${DB1_PORT} (DB1)"
          ssh -o StrictHostKeyChecking=yes -i ~/.ssh/id_rsa -N -f \
            -L 6543:${DB1_HOST}:${DB1_PORT} \
            ${SSH_USER}@${SSH_HOST} -p ${SSH_PORT}

          echo "→ Forward 6544 -> ${DB2_HOST}:${DB2_PORT} (DB2)"
          ssh -o StrictHostKeyChecking=yes -i ~/.ssh/id_rsa -N -f \
            -L 6544:${DB2_HOST}:${DB2_PORT} \
            ${SSH_USER}@${SSH_HOST} -p ${SSH_PORT}

          for i in {1..30}; do
            (echo > /dev/tcp/127.0.0.1/6543) >/dev/null 2>&1 && (echo > /dev/tcp/127.0.0.1/6544) >/dev/null 2>&1 && { echo "✓ Tunnels are up"; exit 0; }
            sleep 0.5
          done
          echo "✗ Tunnel(s) failed to start" >&2
          exit 1

      - name: Run run_query.py
        env:
          DB1_USER:     ${{ secrets.DB1_USER }}
          DB1_PASSWORD: ${{ secrets.DB1_PASSWORD }}
          DB1_NAME:     ${{ secrets.DB1_NAME }}
          DB1_HOST:     ${{ secrets.DB1_HOST }}
          DB1_PORT:     ${{ secrets.DB1_PORT }}
          DB2_USER:     ${{ secrets.DB2_USER }}
          DB2_PASSWORD: ${{ secrets.DB2_PASSWORD }}
          DB2_NAME:     ${{ secrets.DB2_NAME }}
          DB2_HOST:     ${{ secrets.DB2_HOST }}
          DB2_PORT:     ${{ secrets.DB2_PORT }}
          USE_SSH:      ${{ env.USE_SSH }}
        run: |
          set -euo pipefail
          if [ "${USE_SSH}" = "true" ]; then
            export DB1_URL="postgresql://${DB1_USER}:${DB1_PASSWORD}@127.0.0.1:6543/${DB1_NAME}"
            export DB2_URL="postgresql://${DB2_USER}:${DB2_PASSWORD}@127.0.0.1:6544/${DB2_NAME}"
            echo "→ Using SSH tunnel URLs"
          else
            export DB1_URL="postgresql://${DB1_USER}:${DB1_PASSWORD}@${DB1_HOST}:${DB1_PORT}/${DB1_NAME}"
            export DB2_URL="postgresql://${DB2_USER}:${DB2_PASSWORD}@${DB2_HOST}:${DB2_PORT}/${DB2_NAME}"
            echo "→ Using direct DB URLs"
          fi

          python run_query.py   # сохранит user_gold.csv и user_total.csv

      - name: Commit & push if changed
        run: |
          git config user.name  "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add user_gold.csv user_total.csv || true
          git diff --cached --quiet || git commit -m "update csv files ($(date -u +'%Y-%m-%d %H:%M:%S') UTC)"
          git push
