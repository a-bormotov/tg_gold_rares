name: Update CSV hourly

on:
  # включишь планировщик при желании
  #schedule:
  #  - cron: "0 * * * *"   # раз в час (UTC)
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # опционально — держать CNAME из Repo Variables (Settings → Variables → CUSTOM_DOMAIN)
      - name: Ensure CNAME (optional)
        if: ${{ vars.CUSTOM_DOMAIN != '' }}
        run: echo "${{ vars.CUSTOM_DOMAIN }}" > CNAME

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          # если нет requirements.txt — поставим нужное минимально
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install psycopg2-binary pandas
          fi

      # ===== SSH tunnel (включается, если secrets.USE_SSH == 'true') =====
      - name: Start SSH tunnel (if needed)
        if: ${{ secrets.USE_SSH == 'true' }}
        env:
          SSH_KEY:           ${{ secrets.SSH_PRIVATE_KEY }}  # приватный ключ в формате OpenSSH
          SSH_HOST:          ${{ secrets.SSH_HOST }}
          SSH_PORT:          ${{ secrets.SSH_PORT }}
          SSH_USER:          ${{ secrets.SSH_USER }}
          DB_INTERNAL_HOST:  ${{ secrets.DB_HOST }}          # как БД видна с бастиона (часто 127.0.0.1)
          DB_INTERNAL_PORT:  ${{ secrets.DB_PORT }}          # обычно 5432
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # known_hosts
          ssh-keyscan -p "${SSH_PORT}" "${SSH_HOST}" >> ~/.ssh/known_hosts 2>/dev/null || true

          echo "→ Forward 5433 -> ${DB_INTERNAL_HOST}:${DB_INTERNAL_PORT} via ${SSH_USER}@${SSH_HOST}:${SSH_PORT}"
          ssh -o StrictHostKeyChecking=yes -i ~/.ssh/id_rsa -N -f \
            -L 5433:${DB_INTERNAL_HOST}:${DB_INTERNAL_PORT} \
            ${SSH_USER}@${SSH_HOST} -p ${SSH_PORT}

          # ждём, пока локальный порт реально открыт
          for i in {1..30}; do
            (echo > /dev/tcp/127.0.0.1/5433) >/dev/null 2>&1 && { echo "✓ Tunnel is up"; exit 0; }
            sleep 0.5
          done
          echo "✗ Tunnel failed to start" >&2
          exit 1

      - name: Run run_query.py
        env:
          # прямое подключение (если USE_SSH != 'true')
          DB_URL_DIRECT: postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}
          # через туннель (если USE_SSH == 'true')
          DB_URL_TUNNEL: postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@127.0.0.1:5433/${{ secrets.DB_NAME }}
          USE_SSH: ${{ secrets.USE_SSH }}
        run: |
          set -euo pipefail
          echo "USE_SSH=${USE_SSH}"
          # базовая валидация секретов
          for k in DB_USER DB_PASSWORD DB_NAME; do
            if [ -z "${{ secrets.DB_USER }}" ] || [ -z "${{ secrets.DB_PASSWORD }}" ] || [ -z "${{ secrets.DB_NAME }}" ]; then
              echo "✗ One of DB secrets is empty: DB_USER/DB_PASSWORD/DB_NAME" >&2
              exit 1
            fi
          done

          if [ "${USE_SSH}" = "true" ]; then
            export DB_URL="$DB_URL_TUNNEL"
            echo "→ Using SSH tunnel URL"
          else
            export DB_URL="$DB_URL_DIRECT"
            echo "→ Using direct DB URL"
          fi

          python run_query.py   # скрипт сохранит user_gold.csv в корень

      - name: Commit & push if changed
        run: |
          git config user.name  "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add user_gold.csv CNAME || true
          git diff --cached --quiet || git commit -m "update user_gold.csv"
          git push
